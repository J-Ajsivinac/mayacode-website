---
import { Icon } from "astro-icon/components";
import Button from "../components/ui/Button.astro";

interface HeroContent {
    extra: string;
    title: string;
    description: string;
    buttons?: {
        text: string;
        link: string;
        variant?: "primary" | "secondary" | "ghostLight" | "ghostDark";
        target?: string;
    }[];
    backgroundImage?: string | any;
    overlayOpacity?: number;
}

interface Props {
    content: HeroContent;
}


const navItems = [
    { name: "Inicio", href: "#inicio" },
    { name: "Nosotros", href: "#nosotros" },
    { name: "Productos", href: "#productos" },
    { name: "Contacto", href: "#contacto" },
];
---

<nav
    id="navbar"
    class="bg-white text-white px-6 md:px-16 py-5 flex items-center justify-between fixed top-0 left-0 right-0 z-50 transition-transform duration-500 ease-in-out"
>
    <a class="flex items-center gap-2" href="/mayacode-website">
        <Icon name="LineMdCoffee" class="text-4xl text-primary" />
        <span class="font-bold text-primary uppercase font-logo text-2xl">
            MayaCode
        </span>
    </a>

    <div class="md:hidden">
        <button
            id="menu-btn"
            class="text-3xl text-accent transition-transform duration-300 active:scale-90"
            aria-label="Abrir menú"
        >
            ☰
        </button>
    </div>

    <ul
        id="menu"
        class="hidden md:flex gap-8 md:gap-14 flex-col md:flex-row absolute md:static top-full left-0 w-full md:w-auto bg-white md:bg-transparent p-6 md:p-0 shadow-md md:shadow-none transform md:transform-none scale-y-0 md:scale-y-100 origin-top transition-transform duration-500 ease-in-out z-50"
    >
        {
            navItems.map((item, index) => (
                <li
                    class="opacity-0 md:opacity-100 translate-y-2 md:translate-y-0 transition-all duration-500 ease-in-out"
                    style={`transition-delay: ${index * 100}ms`}
                >
                    <a
                        href={item.href}
                        class="block text-[#1b1b1b] hover:text-accent transition-colors duration-300 text-[15px] font-medium"
                        onclick="if(window.innerWidth < 768) this.closest('nav').querySelector('#menu-btn').click()"
                    >
                        {item.name}
                    </a>
                </li>
            ))
        }
        <li
            class="md:hidden mt-4 opacity-0 translate-y-2 transition-all duration-500 ease-in-out delay-300"
        >
            <Button
                href={"#productos"}
                target={"_self"}
                variant={"primary"}
                class="w-full"
            >
                Comprar Ahora
            </Button>
        </li>
    </ul>

    <div class="hidden md:block">
        <Button href={"#productos"} target={"_self"} variant={"primary"}>
            Comprar Ahora
        </Button>
    </div>
</nav>

<script is:inline>
    // Control del navbar al hacer scroll
    let lastScrollTop = 0;
    const navbar = document.getElementById("navbar");
    const scrollThreshold = 100;
    let ticking = false;

    function updateNavbar() {
        const scrollTop =
            window.pageYOffset || document.documentElement.scrollTop;
        if (scrollTop <= scrollThreshold && navbar) {
            navbar.style.transform = "translateY(0)";
            navbar.classList.remove("shadow-lg");
        } else if (
            scrollTop > lastScrollTop &&
            scrollTop > scrollThreshold &&
            navbar
        ) {
            navbar.style.transform = "translateY(-100%)";
        } else if (scrollTop < lastScrollTop && navbar) {
            navbar.style.transform = "translateY(0)";
            navbar.classList.add("shadow-lg");
        }
        lastScrollTop = scrollTop <= 0 ? 0 : scrollTop;
        ticking = false;
    }

    function requestTick() {
        if (!ticking) {
            requestAnimationFrame(updateNavbar);
            ticking = true;
        }
    }

    window.addEventListener("scroll", requestTick);

    // Control del emnu
    const menuBtn = document.getElementById("menu-btn");
    const menu = document.getElementById("menu");
    const menuItems = menu?.querySelectorAll("li");

    function closeMenu() {
        if (!menu || !menuItems) return;
        menu.classList.replace("scale-y-100", "scale-y-0");
        menuItems.forEach((li) => {
            li.classList.remove("opacity-100", "translate-y-0");
            li.classList.add("opacity-0", "translate-y-2");
        });

        setTimeout(() => {
            menu.classList.add("hidden");
        }, 500);
    }

    function openMenu() {
        if (!menu || !menuItems) return;
        menu.classList.remove("hidden");
        menu.classList.add("flex");

        setTimeout(() => {
            menu.classList.replace("scale-y-0", "scale-y-100");
            menuItems.forEach((li) => {
                li.classList.remove("opacity-0", "translate-y-2");
                li.classList.add("opacity-100", "translate-y-0");
            });
        }, 50);
    }

    menuBtn?.addEventListener("click", (e) => {
        e.stopPropagation();
        const isOpen = menu.classList.contains("scale-y-100");
        isOpen ? closeMenu() : openMenu();
    });

    // Cerrar menu al hacer clic fuera
    document.addEventListener("click", (e) => {
        const isClickInsideMenu = menu?.contains(e.target);
        const isClickOnMenuButton =
            e.target === menuBtn || menuBtn?.contains(e.target);

        if (
            !isClickInsideMenu &&
            !isClickOnMenuButton &&
            menu?.classList.contains("scale-y-100")
        ) {
            closeMenu();
        }
    });

    // Cerrar menu al cambiar el tamaño de la ventana
    window.addEventListener("resize", () => {
        if (window.innerWidth >= 768) {
            closeMenu();
        }
    });
</script>
